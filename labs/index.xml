<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Labs on RoundofThree</title>
    <link>/labs/</link>
    <description>Recent content in Labs on RoundofThree</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© 2024 RoundofThree</copyright>
    <lastBuildDate>Fri, 15 Mar 2024 16:29:59 +0000</lastBuildDate><atom:link href="/labs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>GEF for CheriBSD Morello</title>
      <link>/labs/gef-cheri/</link>
      <pubDate>Fri, 15 Mar 2024 16:29:59 +0000</pubDate>
      
      <guid>/labs/gef-cheri/</guid>
      <description>Why the need for this? Because having some handy commands to immediately generate a CLI visualization is very helpful when debugging a binary for exploit developers (or software development). For example, we can quickly get an idea of the state of the heap, which speeds up the process of debugging heap-based exploits. gef-cheri enables this for the CheriBSD platform in the Morello architecture (CHERI-enabled ARM64). You can still apply the same gef-cheri script to analyse non-CHERI binaries, in which case the behavior should be the same as the original gef.</description>
      <content>&lt;p&gt;Why the need for this? Because having some handy commands to immediately generate a CLI visualization
is very helpful when debugging a binary for exploit developers (or software development). For example,
we can quickly get an idea of the state of the heap, which speeds up the process of debugging heap-based
exploits. &lt;a href=&#34;https://github.com/CTSRD-CHERI/gef&#34;&gt;gef-cheri&lt;/a&gt; enables this for the CheriBSD platform in the Morello
architecture (CHERI-enabled ARM64). You can still apply the same gef-cheri script to analyse non-CHERI binaries,
in which case the behavior should be the same as the original &lt;a href=&#34;https://github.com/hugsy/gef&#34;&gt;gef&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;setup&#34;&gt;Setup&lt;/h2&gt;
&lt;p&gt;To load the gef-cheri python script when you start a debugging session, add this line to
&lt;code&gt;~/.gdbinit&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;source /path/to/gef-cheri/gef.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;some-commands&#34;&gt;Some commands&lt;/h2&gt;
&lt;p&gt;Here are some commands that I often use.&lt;/p&gt;
&lt;h3 id=&#34;vmmap&#34;&gt;vmmap&lt;/h3&gt;
&lt;p&gt;Getting process memory mappings information is different in FreeBSD (and CheriBSD) and in Linux. gef-cheri is taught to identify a platform other than Linux. In addition, the original gef identifies the heap memory mappings by assuming that heap memory is managed by the glibc memory allocator. This is not true in FreeBSD (and CheriBSD), so we have to implement a heap memory blocks identification logic for each heap manager other than glibc malloc. Below is the output of the &lt;code&gt;vmmap&lt;/code&gt; command against a binary in CheriBSD running the jemalloc memory allocator.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;gef&amp;gt; vm
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; Legend:  Code | Heap | Stack &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
Start                              End                                Offset                             Perm Path
0x0000000000100000 0x0000000000101000 0x0000000000000000 r-- /home/roundofthree/heap_game
0x0000000000101000 0x0000000000110000 0x0000000000001000 --- 
0x0000000000110000 0x0000000000111000 0x0000000000000000 r-x /home/roundofthree/heap_game
0x0000000000111000 0x0000000000120000 0x0000000000011000 --- 
0x0000000000120000 0x0000000000122000 0x0000000000000000 r-- /home/roundofthree/heap_game
0x0000000000122000 0x0000000000131000 0x0000000000022000 --- 
0x0000000000131000 0x0000000000132000 0x0000000000000000 rw- 
0x0000000040131000 0x0000000040139000 0x0000000000000000 r-- /libexec/ld-elf.so.1
0x0000000040139000 0x0000000040148000 0x0000000000008000 --- 
0x0000000040148000 0x0000000040163000 0x0000000000007000 r-x /libexec/ld-elf.so.1
0x0000000040163000 0x0000000040172000 0x0000000000032000 --- 
0x0000000040172000 0x0000000040175000 0x0000000000021000 rw- /libexec/ld-elf.so.1
0x0000000040175000 0x0000000040184000 0x0000000000044000 --- 
0x0000000040184000 0x0000000040185000 0x0000000000023000 rw- /libexec/ld-elf.so.1
0x0000000040185000 0x0000000040187000 0x0000000000000000 rw- 
0x0000000040187000 0x0000000040190000 0x0000000000002000 rw- 
0x0000000040191000 0x0000000040223000 0x0000000000000000 r-- /lib/libc.so.7
0x0000000040223000 0x0000000040232000 0x0000000000092000 --- 
0x0000000040232000 0x0000000040370000 0x0000000000091000 r-x /lib/libc.so.7
0x0000000040370000 0x000000004037f000 0x00000000001df000 --- 
0x000000004037f000 0x000000004039c000 0x00000000001ce000 r-- /lib/libc.so.7
0x000000004039c000 0x00000000403ab000 0x000000000020b000 --- 
0x00000000403ab000 0x00000000403b6000 0x00000000001ea000 rw- /lib/libc.so.7
0x00000000403b6000 0x00000000407e7000 0x0000000000000000 rw- 
0x00000000407e7000 0x00000000407e9000 0x0000000000000000 rw- 
0x00000000407e9000 0x00000000407f0000 0x0000000000000000 --- 
0x00000000407f0000 0x0000000040811000 0x0000000000000000 rw- 
0x0000000040811000 0x0000000040818000 0x0000000000000000 --- 
0x0000000040818000 0x0000000040828000 0x0000000000000000 rw- 
0x0000000040828000 0x0000000040877000 0x0000000000010000 rw- 
0x0000000040a00000 0x0000000040c00000 0x0000000000000000 rw- &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;heap block&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
0x0000000040c00000 0x0000000040e00000 0x0000000000200000 rw- &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;heap&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
0x0000000040e00000 0x0000000041400000 0x0000000000400000 rw- &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;heap block&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
0x0000fbfdbffff000 0x0000fbfdc0000000 0x0000000000000000 rw- 
0x0000fbfdc0000000 0x0000fe0000000000 0x0000000000000000 rw- 
0x0000ffffbfeff000 0x0000ffffbff80000 0x0000000000000000 rw- 
0x0000ffffbff80000 0x0000fffffff60000 0x00000000001b001b --- 
0x0000fffffff60000 0x0000fffffff80000 0x0000000000000000 rw- &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;stack&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
0x0000fffffffff000 0x0001000000000000 0x0000000000000000 r-x
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;telescope&#34;&gt;telescope&lt;/h3&gt;
&lt;p&gt;One notable difference is that the stack alignment is 0x10 in
CHERI-enabled platforms. By default, &lt;code&gt;telescope&lt;/code&gt; without
arguments will display a stack view starting from the address
pointed by &lt;code&gt;$csp&lt;/code&gt; (&lt;code&gt;$rcsp&lt;/code&gt; if in Restricted mode, see &lt;a href=&#34;https://www.cl.cam.ac.uk/techreports/UCAM-CL-TR-987.pdf&#34;&gt;CHERI ISAv9&lt;/a&gt;).
We also can use the capability tag as a filter to indicate whether to dereference or not, it&amp;rsquo;s more accurate than guessing whether a value is a code or data pointer.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;gef&amp;gt; telescope
0x0000fffffff7f800│+0x0000: 0x0000fffffff7f820 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rwRW,0xffffbff80000-0xfffffff80000,len&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x40000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;  →  0x0000fffffff7f850 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rwRW,0xffffbff80000-0xfffffff80000,len&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x40000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;  →  0x0000fffffff7fd00 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rwRW,0xffffbff80000-0xfffffff80000,len&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x40000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;  →  0x0000fffffff7fe60 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rwRW,0xffffbff80000-0xfffffff80000,len&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x40000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;  →  0x0000fffffff7ff60 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rwRW,0xffffbff80000-0xfffffff80000,len&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x40000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;  →  0x0000fffffff7ff80 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rwRW,0xffffbff80000-0xfffffff80000,len&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x40000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;  →  0x0000fffffff7ffe0 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rwRW,0xffffbff80000-0xfffffff80000,len&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x40000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;	 ← $c29, $csp
0x0000fffffff7f810│+0x0010: 0x00000000402bc9d9 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rxRX,0x40191000-0x407e7000,len&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x656000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;sen&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;  →  &amp;lt;_sread+0020&amp;gt; cmp w0,  &lt;span style=&#34;color:#75715e&#34;&gt;#0x1&lt;/span&gt;
0x0000fffffff7f820│+0x0020: 0x0000fffffff7f850 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rwRW,0xffffbff80000-0xfffffff80000,len&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x40000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;  →  0x0000fffffff7fd00 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rwRW,0xffffbff80000-0xfffffff80000,len&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x40000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;  →  0x0000fffffff7fe60 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rwRW,0xffffbff80000-0xfffffff80000,len&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x40000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;  →  0x0000fffffff7ff60 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rwRW,0xffffbff80000-0xfffffff80000,len&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x40000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;  →  0x0000fffffff7ff80 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rwRW,0xffffbff80000-0xfffffff80000,len&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x40000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;  →  0x0000fffffff7ffe0 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rwRW,0xffffbff80000-0xfffffff80000,len&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x40000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;  →  0x0000000000000000
0x0000fffffff7f830│+0x0030: 0x00000000402bbfa1 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rxRX,0x40191000-0x407e7000,len&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x656000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;sen&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;  →  &amp;lt;__srefill+0154&amp;gt; ldrh w8,  &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;c19,  &lt;span style=&#34;color:#75715e&#34;&gt;#24]&lt;/span&gt;
0x0000fffffff7f840│+0x0040: 0x00000000403adfa0 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rwRWX,0x403adfa0-0x403ae510,len&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x570&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;  →  0x0000000040c17000 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rwRW,0x40c17000-0x40c18000,len&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x1000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;  →  0x00000000000a0a31 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1\n\n&amp;#34;&lt;/span&gt;?&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
0x0000fffffff7f850│+0x0050: 0x0000fffffff7fd00 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rwRW,0xffffbff80000-0xfffffff80000,len&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x40000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;  →  0x0000fffffff7fe60 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rwRW,0xffffbff80000-0xfffffff80000,len&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x40000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;  →  0x0000fffffff7ff60 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rwRW,0xffffbff80000-0xfffffff80000,len&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x40000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;  →  0x0000fffffff7ff80 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rwRW,0xffffbff80000-0xfffffff80000,len&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x40000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;  →  0x0000fffffff7ffe0 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rwRW,0xffffbff80000-0xfffffff80000,len&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x40000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;  →  0x0000000000000000
0x0000fffffff7f860│+0x0060: 0x00000000402c11d9 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rxRX,0x40191000-0x407e7000,len&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x656000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;sen&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;  →  &amp;lt;__svfscanf+0538&amp;gt; cbnz w0,  0x402c23ec &amp;lt;__svfscanf+5964&amp;gt;
0x0000fffffff7f870│+0x0070: 0x0000000000000000                
0x0000fffffff7f880│+0x0080: 0x0000fffffff7f967 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rwRW,0xfffffff7f968-0xfffffff7fb69,len&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x201&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;  →  0x5d40007c50fb2000
0x0000fffffff7f890│+0x0090: 0x0000fffffff7f9d0 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rwRW,0xffffbff80000-0xfffffff80000,len&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x40000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;  →  0x0000fffffff7fc10 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rwRW,0xffffbff80000-0xfffffff80000,len&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x40000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;  →  0x0000fffffff7fdc0 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rwRW,0xffffbff80000-0xfffffff80000,len&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x40000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;  →  0x0000fffffff7fea0 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rwRW,0xfffffff7fea0-0xfffffff7feb0,len&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x10&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;  →  0x0000fffffff7ff24 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rwRW,0xfffffff7ff24-0xfffffff7ff28,len&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x4&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;  →  0x0000000100000001
gef&amp;gt;  
0x0000fffffff7f8a0│+0x00a0: 0x0000fffffff7fc70 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rwRW,0xfffffff7fc70-0xfffffff7fcf0,len&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x80&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;  →  0x0000000000001800
0x0000fffffff7f8b0│+0x00b0: 0x0000fffffff7fa00 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rwRW,0xfffffff7fa00-0xfffffff7fa80,len&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x80&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;  →  0xfffffffffffffffffb5d25837d7ff700
0x0000fffffff7f8c0│+0x00c0: 0x0000000a0611487b                
0x0000fffffff7f8d0│+0x00d0: 0x00000000403ae170 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rwRWX,0x403adfa0-0x403ae510,len&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x570&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;  →  0x0000000040c16000 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rwRW,0x40c16000-0x40c17000,len&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x1000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;  →  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Has chunk 2 been freed? (1 for Yes, 0 for No): &amp;#34;&lt;/span&gt;
0x0000fffffff7f8e0│+0x00e0: 0x0000000000000001                
0x0000fffffff7f8f0│+0x00f0: 0x00000000403ad5a0 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rwRWX,0x403ad5a0-0x403ad700,len&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x160&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;  →  0x0000000000000000
0x0000fffffff7f900│+0x0100: 0x000000004081a240 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rwRW,0x4081a240-0x4081a250,len&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x10&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;  →  0x0000000000000000
0x0000fffffff7f910│+0x0110: 0x0000000000000000                
0x0000fffffff7f920│+0x0120: 0x0000fffffff7fb6c &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rwRW,0xfffffff7fb6c-0xfffffff7fc6c,len&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x100&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;  →  0xfffffffffffffffffff7fb1fdc5d4000
0x0000fffffff7f930│+0x0130: 0x0000ffffffffffff &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;-,0xffffbff80000-0xfffffff80000,len&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x40000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;bad&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;xinfo&#34;&gt;xinfo&lt;/h3&gt;
&lt;p&gt;This is exactly the same command in the original gef script.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;gef&amp;gt;  xinfo 0x40c28000
──────────────────────────────────────────────────────────────────────────────────────────────── xinfo: 0x40c28000 ────────────────────────────────────────────────────────────────────────────────────────────────
Page: 0x0000000040c00000  →  0x0000000040e00000 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x200000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
Permissions: rw-
Pathname: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;heap&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
Offset &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;from page&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;: 0x28000
Inode: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;scancap&#34;&gt;scancap&lt;/h3&gt;
&lt;p&gt;gef-cheri implements the needle-in-haystack search with an additional filter of valid capabilities (valid tag). For example, the example below scans for valid capabilities in the stack memory region that points to the heap memory region.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;gef&amp;gt;  scan stack heap 
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;+&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; In &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;[stack]&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0xfffffff60000-0xfffffff80000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, permission&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;rw-
  0xfffffff7cb50  →  0x00000040c0e000 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rwRW,0x40c00000-0x40e00000,len&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x200000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; 
  0xfffffff7df80  →  0x00000040c1f000 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rwRW,0x40c00000-0x40e00000,len&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x200000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; 
  0xfffffff7e880  →  0x00000040c28000 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rwRW,0x40c00000-0x40e00000,len&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x200000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; 
  0xfffffff7f6a0  →  0x00000040c16000 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rwRW,0x40c16000-0x40c17000,len&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x1000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; 
  0xfffffff7fb50  →  0x000000001009b1 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rR,0x100993-0x1009b4,len&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x21&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; 
  0xfffffff7fdb0  →  0x00000000100945 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rR,0x100945-0x100949,len&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x4&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; 
  0xfffffff7fe70  →  0x00000000110d35 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rxRX,0x100000-0x1313c0,len&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x313c0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;sen&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 
  0xfffffff7fe90  →  0x00000000110b8d &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rxRX,0x100000-0x1313c0,len&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x313c0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;sen&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 
  0xfffffff7feb0  →  0x00000040c28000 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rwRW,0x40c28000-0x40c28010,len&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x10&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; 
  0xfffffff7ff40  →  0x00000040c20000 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rwRW,0x40c20000-0x40c200a0,len&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0xa0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; 
  0xfffffff7ff90  →  0x00000000110b59 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rxRX,0x100000-0x1313c0,len&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x313c0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;sen&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;more-heap-managers&#34;&gt;More heap managers&lt;/h2&gt;
&lt;p&gt;To analyze heaps managed by allocators other than glibc allocator, I developed some plugins in &lt;a href=&#34;https://github.com/CTSRD-CHERI/gef-plugins&#34;&gt;gef-plugins repo&lt;/a&gt;. To load it at the start of a debugging session, add this line to &lt;code&gt;~/.gdbinit&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;gef config gef.extra_plugins_dir /path/to/gef-plugins
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;jemalloc&#34;&gt;jemalloc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;jheap chunks&lt;/code&gt;: list in use heap allocations&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;gef&amp;gt;  jheap chunks
Chunk&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x40c00000, size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0xe000 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Large&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, status&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Used&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0x0000000040c00000     &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;    ................&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
Chunk&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x40c0e000, size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x8 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Small&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, status&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Used&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0x0000000040c0e000     e2 &lt;span style=&#34;color:#ae81ff&#34;&gt;03&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; e8 &lt;span style=&#34;color:#ae81ff&#34;&gt;03&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;    ................&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
Chunk&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x40c0f000, size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0xe0 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Small&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, status&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Used&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0x0000000040c0f000     &lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt; f0 c0 &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; f0 d0 &lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt; 5d dc    p..@.......p.@&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;.&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
Chunk&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x40c16000, size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x1000 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Small&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, status&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Used&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0x0000000040c16000     &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;61&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;73&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;68&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;75&lt;/span&gt; 6e 6b &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;62&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt; 6e    Has chunk &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; been&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
Chunk&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x40c17000, size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x1000 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Small&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, status&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Used&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0x0000000040c17000     &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt; 0a 0a &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;    1...............&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
Chunk&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x40c20000, size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0xa0 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Small&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, status&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Used&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0x0000000040c20000     &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt; c2 &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;07&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;07&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt; 5d dc    .P.@.....P.0.@&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;.&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
Chunk&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x40c25000, size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x6000 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Large&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, status&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Used&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0x0000000040c25000     &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;    ................&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
Chunk&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x40c2b000, size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x10000 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Large&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, status&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Used&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0x0000000040c2b000     &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;    ................&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;jheap chunk &amp;lt;address&amp;gt;&lt;/code&gt;: inspect a heap allocation&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;gef&amp;gt;  jheap chunk 0x40c40000
Chunk&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x40c40000, size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x4000 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Large&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, status&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Free&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
In quarantine: Yes
In tcache: No
Extent base: 0x40c40000
Extent size: 0x4000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;jheap uaf [noheap]&lt;/code&gt;: scan for freed heap allocations that are pointed by valid capabilities in memory. Optionally, exclude capabilities stored in the heap.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;gef&amp;gt;  jheap uaf noheap
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;+&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; In &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;[stack]&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0xfffffff60000-0xfffffff80000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, permission&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;rw-
  0xfffffff7df80  →  0x00000040c1f000 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rwRW,0x40c00000-0x40e00000,len&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x200000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;snmalloc&#34;&gt;snmalloc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;snheap info&lt;/code&gt;: print pagemap address&lt;/li&gt;
&lt;li&gt;&lt;code&gt;snheap localcache&lt;/code&gt;: list entries in local cache &lt;code&gt;LocalCache&lt;/code&gt; (also called small fast free lists)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;snheap slabs&lt;/code&gt;: lists slabs in the core allocator (there can be multiple slabs per small size class, and large slabs)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;snheap remote&lt;/code&gt;: lists the remote deallocation queue of the current of given thread(s)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;snheap freelists&lt;/code&gt;: list entries in local cache &lt;code&gt;LocalCache&lt;/code&gt; in the local allocator, the deallocation queue in remote allocators and active slab free lists in the core allocator&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;gef&amp;gt;  snheap freelists 
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;+&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Guessed the LocalAlloc address to be 0x40a42070
────────────────────────────────────────────────────────────────────────────── Thread 1: localcache &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; LocalAlloc&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x40a42070&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; ──────────────────────────────────────────────────────────────────────────────
small_fast_free_lists&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;idx&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;2, size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x60, count&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;169&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;  →  Alloc&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x42024060&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;  →  Alloc&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x420240c0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;  →  Alloc&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x42024120&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;  →  Alloc&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x42024180&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;  →  ...  →  Alloc&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x42027f60&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 

small_fast_free_lists&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;idx&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;3, size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x80, count&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;127&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;  →  Alloc&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x42008080&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;  →  Alloc&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x42008100&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;  →  Alloc&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x42008180&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;  →  Alloc&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x42008200&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;  →  ...  →  Alloc&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x4200bf80&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 

small_fast_free_lists&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;idx&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;4, size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0xa0, count&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;101&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;  →  Alloc&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x420200a0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;  →  Alloc&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x42020140&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;  →  Alloc&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x420201e0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;  →  Alloc&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x42020280&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;  →  ...  →  Alloc&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x42023f20&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 

small_fast_free_lists&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;idx&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;6, size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0xe0, count&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;72&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;  →  Alloc&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x420100e0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;  →  Alloc&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x420101c0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;  →  Alloc&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x420102a0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;  →  Alloc&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x42010380&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;  →  ...  →  Alloc&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x42013f00&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 

small_fast_free_lists&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;idx&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;20, size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0xa00, count&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;5&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;  →  Alloc&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x42004a00&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;  →  Alloc&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x42005400&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;  →  Alloc&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x42005e00&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;  →  Alloc&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x42006800&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;  →  ...  →  Alloc&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x42007200&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 

small_fast_free_lists&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;idx&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;23, size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x1000, count&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;3&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;  →  Alloc&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x42015000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;  →  Alloc&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x42016000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;  →  Alloc&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x42017000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 

small_fast_free_lists&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;idx&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;30, size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x3800, count&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;3&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;  →  Alloc&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x42083800&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;  →  Alloc&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x42087000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;  →  Alloc&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x4208a800&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 

small_fast_free_lists&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;idx&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;34, size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x7000, count&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;3&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;  →  Alloc&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x42047000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;  →  Alloc&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x4204e000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;  →  Alloc&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x42055000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 

────────────────────────────────────────────────────────────── Thread 1: active slabs &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; CoreAlloc&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x42000000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;  ←  LocalAlloc&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x40a42070&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; ──────────────────────────────────────────────────────────────
SlabMetadataCache&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;idx&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;34, alloc_size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x7000, unused&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0, length&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: 
 | →  SlabMetadata&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x42000d80, needed&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;3, sleeping&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;False, large&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;False&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;count&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;  →  Alloc&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x42040000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 

───────────────────────────────────────────────────────────────── Thread 1: laden &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; CoreAlloc&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x42000000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;  ←  LocalAlloc&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x40a42070&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; ─────────────────────────────────────────────────────────────────
SlabMetadata&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x42000e80, needed&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1, sleeping&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True, large&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;False&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;count&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 

SlabMetadata&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x42000e00, needed&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;32, sleeping&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True, large&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;False&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;count&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 

SlabMetadata&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x42000d00, needed&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;25, sleeping&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True, large&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;False&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;count&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 

SlabMetadata&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x42000c80, needed&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1, sleeping&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True, large&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;False&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;count&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 

SlabMetadata&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x42000c00, needed&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;18, sleeping&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True, large&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;False&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;count&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 

SlabMetadata&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x42000b80, needed&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;32, sleeping&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True, large&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;False&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;count&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 

SlabMetadata&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x42000b00, needed&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1, sleeping&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True, large&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;False&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;count&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 

───────────────────────────────────────────────────── Thread 1: remote deallocation queue &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; RemoteAllocator&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x42000800&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;  ←  CoreAlloc&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x42000000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; ─────────────────────────────────────────────────────
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;+&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Remote deallocation list is empty
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;snheap chunk &amp;lt;address&amp;gt;&lt;/code&gt;: lists details about the &lt;code&gt;Alloc&lt;/code&gt; and its slab. If the metaentry has the &lt;code&gt;REMOTE_BACKEND_MARKER&lt;/code&gt; bit asserted, that is, the chunk is owned by the backend (not &lt;code&gt;Alloc&lt;/code&gt;-bounded), then indicate it as a &lt;code&gt;Chunk&lt;/code&gt;. Because backend chunks&#39; metaentry are parsed differently depending on the specific &lt;code&gt;Range&lt;/code&gt;, we can make a best guess of the owning &lt;code&gt;Range&lt;/code&gt;. In the case that CHERI revocation is enabled, also print whether it is quarantined and its revocation bit value.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;gef&amp;gt;  snheap chunk 0x42024060
Alloc&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x42024060&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
Object in quarantine: False
Start of object: 0x42024060
Object size: 0x60
Offset into object: 0x0
Metaentry @ 0x50210120
Associated slab details:
SlabMetadata&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x42000e00, needed&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;32, sleeping&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True, large&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;False&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;count&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;+&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Free list is empty
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;mrs-wrapper&#34;&gt;mrs wrapper&lt;/h3&gt;
&lt;p&gt;CheriBSD 23.11 malloc is shipped with the mrs wrapper around memory allocation APIs: &lt;code&gt;mrs_malloc&lt;/code&gt;, &lt;code&gt;mrs_free&lt;/code&gt;&amp;hellip;, to enforce heap temporal safety. This plugin provides commands to query for mrs-specific information:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mrs info&lt;/code&gt;: display general information about the mrs quarantine, global state and the revocation bitmap.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;gef&amp;gt;  mrs info 
──────────────────────────────────────────────────────────────────────────────────────────────────── Thread &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ────────────────────────────────────────────────────────────────────────────────────────────────────
Allocated size: 0x8a90
Max allocated size: 0x8a90
Quarantine size: 0x5100
Quarantine max size: 0x5100
Entire revocation map capability: 0x0000fc0000000000 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rw,0xfc0000000000-0xfe0000000000,len&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x20000000000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mrs chunk &amp;lt;address&amp;gt;&lt;/code&gt;: query whether this chunk is owned by the allocator or quarantined. Also show shadow bitmap offset and value. The information we can query is limited because the capability load generation counter registers are not available to gdb in ring 3, so we can&amp;rsquo;t inspect the kernel internal state of caprevoke unless debugging the kernel or using qemu.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;gef&amp;gt;  mrs chunk 0x40c40000
Chunk&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x40c40000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
In quarantine: Yes
Revocation bit address: 0xfc0000818800
Revocation bit set &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;first word&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;: Yes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mrs quarantine&lt;/code&gt;: print the quarantined chunks (and their shadow bit values of the allocation first word).&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;gef&amp;gt;  mrs quarantine 
application_quarantine&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x5100, count&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;4&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; 
  →  Chunk&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x40c20700, size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x700&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
  →  Chunk&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x40c36000, size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x400&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
  →  Chunk&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x40c40000, size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x4000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
  →  Chunk&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x40c44000, size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x600&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
  </channel>
</rss>
